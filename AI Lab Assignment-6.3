{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/QQGWb+c7uYMlx9VtEIZJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2403a52026-lgtm/AIAC/blob/main/AI%20Lab%20Assignment-6.3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G2VBhCUXk_oU"
      },
      "outputs": [],
      "source": [
        "Task 1:Use AI to complete a Student class with attributes and a method.\n",
        "• Check output\n",
        "• Analyze the code generated by AI tool"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:Write a Python class named Student with a constructor to initialize name, roll number, and marks. Include a method display_details() to print student info, take details of student with dynamic input"
      ],
      "metadata": {
        "id": "5uFJ_muKuWAd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Student:\n",
        "    def __init__(self, name, roll_number, marks):\n",
        "        self.name = name\n",
        "        self.roll_number = roll_number\n",
        "        self.marks = marks\n",
        "\n",
        "    def display_details(self):\n",
        "        print(f\"Name: {self.name}\")\n",
        "        print(f\"Roll Number: {self.roll_number}\")\n",
        "        print(f\"Marks: {self.marks}\")\n",
        "\n",
        "# Get dynamic input from the user\n",
        "name = input(\"Enter student name: \")\n",
        "roll_number = input(\"Enter student roll number: \")\n",
        "marks = input(\"Enter student marks: \")\n",
        "\n",
        "# Create a Student object and display details\n",
        "student1 = Student(name, roll_number, marks)\n",
        "student1.display_details()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OCorK31hu2XO",
        "outputId": "2c1d6671-b95c-4fef-fbbb-f15d36f0d220"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter student name: abhi\n",
            "Enter student roll number: 2403a52030\n",
            "Enter student marks: 50\n",
            "Name: abhi\n",
            "Roll Number: 2403a52030\n",
            "Marks: 50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explaination:\n",
        "\n",
        "class Student:: This line declares a new class named Student.\n",
        "\n",
        "def __init__(self, name, roll_number, marks):: This is the constructor method (__init__). It's called when you create a new Student object. It takes self (which refers to the instance of the class), name, roll_number, and marks as arguments and initializes the corresponding attributes of the object.\n",
        "\n",
        "self.name = name, self.roll_number = roll_number, self.marks = marks: These lines assign the values passed to the constructor to the object's attributes.\n",
        "\n",
        "def display_details(self):: This defines a method within the Student class called display_details. It takes self as an argument and prints the student's name, roll number, and marks using the object's attributes.\n",
        "\n",
        "name = input(\"Enter student name: \"), roll_number = input(\"Enter student roll number: \"), marks = input(\"Enter student marks: \"): These lines prompt the user to enter the student's name, roll number, and marks, and store the input in variables.\n",
        "\n",
        "student1 = Student(name, roll_number, marks): This line creates a new instance (object) of the Student class using the input provided by the user.\n",
        "\n",
        "student1.display_details(): This line calls the display_details method on the student1 object, which prints the details of the student.\n"
      ],
      "metadata": {
        "id": "fJ_MwQ6kvXLB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2:\n",
        "Prompt AI to complete a function that prints the first 10 multiples of a number using a loop. • Analyze the generated code • Ask AI to generate code using other controlled looping."
      ],
      "metadata": {
        "id": "pYtrPtM3wXZs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Prompt:\n",
        " Write a Python function that prints the first 10 multiples of a given number using a for loop.\n"
      ],
      "metadata": {
        "id": "7dA8L-buwjCF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def print_multiples_for(number):\n",
        "  \"\"\"Prints the first 10 multiples of a given number using a for loop.\"\"\"\n",
        "  print(f\"Multiples of {number}:\")\n",
        "  for i in range(1, 11):\n",
        "    print(number * i)\n",
        "\n",
        "# Example usage:\n",
        "print_multiples_for(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZCG6VRTyxLXL",
        "outputId": "b875c46d-c3ae-45c9-8011-1d102bb2adcf"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Multiples of 5:\n",
            "5\n",
            "10\n",
            "15\n",
            "20\n",
            "25\n",
            "30\n",
            "35\n",
            "40\n",
            "45\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explaination:\n",
        "\n",
        "def print_multiples_for(number):: This line defines a function named print_multiples_for that accepts one argument, number.\n",
        "\n",
        "\"\"\"Prints the first 10 multiples of a given number using a for loop.\"\"\": This is a docstring, which explains what the function does.\n",
        "\n",
        "print(f\"Multiples of {number}:\"): This line prints a header indicating which number's multiples will be displayed.\n",
        "\n",
        "for i in range(1, 11):: This is a for loop that iterates through a sequence of numbers generated by range(1, 11). range(1, 11) generates numbers from 1 up to (but not including) 11, so i will take on the values 1, 2, 3, ..., 10.\n",
        "\n",
        "print(number * i): Inside the loop, this line calculates the multiple of the given number by multiplying it with the current value of i and then prints the result.\n",
        "\n",
        "print_multiples_for(5): This line calls the function with the argument 5, so it will print the first 10 multiples of 5.\n"
      ],
      "metadata": {
        "id": "v5KWBVd3xknu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 3:\n",
        "Ask AI to write nested if-elif-else conditionals to classify age groups.\n",
        "• Analyze the generated code\n",
        "• Ask AI to generate code using other conditional statements"
      ],
      "metadata": {
        "id": "MmXQ7tfqyB5C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:\n",
        "Write a Python function using nested if-elif-else statements to classify a person into an age group. age should be given by user"
      ],
      "metadata": {
        "id": "0VykRu5Fzhc1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def classify_age_nested(age):\n",
        "  \"\"\"Classifies a person into an age group using nested if-elif-else.\"\"\"\n",
        "  if age < 0:\n",
        "    return \"Invalid age\"\n",
        "  else:\n",
        "    if age < 13:\n",
        "      return \"Child\"\n",
        "    elif age < 20:\n",
        "      return \"Teenager\"\n",
        "    else:\n",
        "      if age < 65:\n",
        "        return \"Adult\"\n",
        "      else:\n",
        "        return \"Senior\"\n",
        "\n",
        "# Get age input from the user\n",
        "try:\n",
        "    user_age = int(input(\"Enter the person's age: \"))\n",
        "    # Classify and print the age group\n",
        "    age_group = classify_age_nested(user_age)\n",
        "    print(f\"The person is classified as: {age_group}\")\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter a valid integer for age.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SJqdwOpezqNh",
        "outputId": "70dc43d2-bd8c-4db7-cb7f-4dfecf71d92f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the person's age: 18\n",
            "The person is classified as: Teenager\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explaination:\n",
        "\n",
        "def classify_age_nested(age):: This defines a function named classify_age_nested that takes one argument, age.\n",
        "\n",
        "\"\"\"Classifies a person into an age group using nested if-elif-else.\"\"\": This is a docstring explaining the function's purpose.\n",
        "\n",
        "if age < 0:: This checks if the age is less than 0. If true, it returns \"Invalid age\".\n",
        "\n",
        "else:: If the age is not less than 0, the code enters this block for further classification.\n",
        "\n",
        "if age < 13:: Inside the first else block, this checks if the age is less than 13. If true, it returns \"Child\".\n",
        "\n",
        "elif age < 20:: If the age is not less than 13, this checks if it's less than 20. If true, it returns \"Teenager\".\n",
        "\n",
        "else:: If the age is not less than 20, the code enters this nested else block.\n",
        "if age < 65:: Inside the nested else block, this checks if the age is less than 65. If true, it returns \"Adult\".\n",
        "\n",
        "else:: If the age is not less than 65, it means the age is 65 or older, so it returns \"Senior\".\n",
        "\n",
        "try:: This block is used for error handling. It attempts to execute the code within it.\n",
        "\n",
        "user_age = int(input(\"Enter the person's age: \")): This line prompts the user to enter the person's age and attempts to convert the input into an integer.\n",
        "\n",
        "age_group = classify_age_nested(user_age): This line calls the classify_age_nested function with the user's age and stores the returned age group in the age_group variable.\n",
        "\n",
        "print(f\"The person is classified as: {age_group}\"): This line prints the classified age group.\n",
        "\n",
        "except ValueError:: If the code in the try block fails to convert the input to an integer (e.g., the user enters text), a ValueError is raised, and the code in this block is executed.\n",
        "\n",
        "print(\"Invalid input. Please enter a valid integer for age.\"): This line prints an error message if the user's input is not a valid integer."
      ],
      "metadata": {
        "id": "gE9_r6j20DfB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 4:\n",
        "Generate a sum_to_n() function to calculate sum of first n numbers\n",
        "\n",
        "• Analyze the generated code\n",
        "\n",
        "• Get suggestions from AI with other controlled looping"
      ],
      "metadata": {
        "id": "UBNuXxT10nVF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:\n",
        "Write a Python function called sum_to_n(n) that calculates the sum of the first n natural numbers using a loop.\n"
      ],
      "metadata": {
        "id": "cT-J0ncs05yF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_to_n(n):\n",
        "  \"\"\"Calculates the sum of the first n natural numbers using a loop.\"\"\"\n",
        "  if n < 1:\n",
        "    return \"Input should be a positive integer\"\n",
        "  else:\n",
        "    total_sum = 0\n",
        "    for i in range(1, n + 1):\n",
        "      total_sum += i\n",
        "    return total_sum\n",
        "\n",
        "# Get input from the user\n",
        "try:\n",
        "  num = int(input(\"Enter a positive integer (n): \"))\n",
        "  # Calculate and print the sum\n",
        "  result = sum_to_n(num)\n",
        "  print(f\"The sum of the first {num} natural numbers is: {result}\")\n",
        "except ValueError:\n",
        "  print(\"Invalid input. Please enter a valid positive integer.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dZHVabcB1DaI",
        "outputId": "2f1c81d2-4351-424d-b27d-f9e58cb8ed97"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a positive integer (n): 26\n",
            "The sum of the first 26 natural numbers is: 351\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explaination:\n",
        "\n",
        "def sum_to_n(n):: This defines a function named sum_to_n that takes one argument, n.\n",
        "\n",
        "\"\"\"Calculates the sum of the first n natural numbers using a loop.\"\"\": This is a docstring explaining the function's purpose.\n",
        "\n",
        "if n < 1:: This checks if the input n is less than 1. If true, it means the input is not a positive integer, and the function returns an error message.\n",
        "\n",
        "else:: If n is 1 or greater, the code enters this block to calculate the sum.\n",
        "\n",
        "total_sum = 0: Initializes a variable total_sum to 0. This variable will store the accumulating sum.\n",
        "\n",
        "for i in range(1, n + 1):: This is a for loop that iterates from 1 up to and including n.\n",
        "\n",
        "total_sum += i: In each iteration of the loop, the current value of i is added to total_sum.\n",
        "\n",
        "return total_sum: After the loop finishes, the function returns the calculated total_sum.\n",
        "\n",
        "try:: This block is used for error handling. It attempts to execute the code within it.\n",
        "\n",
        "num = int(input(\"Enter a positive integer (n): \")): This line prompts the user to enter a positive integer and attempts to convert the input into an integer, storing it in the num variable.\n",
        "\n",
        "result = sum_to_n(num): This line calls the sum_to_n function with the user's input num and stores the returned sum in the result variable.\n",
        "\n",
        "print(f\"The sum of the first {num} natural numbers is: {result}\"): This line prints the calculated sum.\n",
        "\n",
        "except ValueError:: If the code in the try block fails to convert the input to an integer, a ValueError is raised, and the code in this block is executed.\n",
        "\n",
        "print(\"Invalid input. Please enter a valid positive integer.\"): This line prints an error message if the user's input is not a valid integer.\n"
      ],
      "metadata": {
        "id": "Gt5jBKLk1lyN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 5:\n",
        "Use AI to build a BankAccount class with deposit, withdraw, and balance methods.\n",
        "• Analyze the generated code\n",
        "\n",
        "• Add comments and explain code"
      ],
      "metadata": {
        "id": "469F_E9v2vUC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:\n",
        "Write a Python class named BankAccount that supports deposit, withdraw, and balance checking.\n"
      ],
      "metadata": {
        "id": "y3MA52yW2id1"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z7aV0jCG3Cms",
        "outputId": "30759d17-cdbe-4481-da0c-3341e2712e0f"
      },
      "source": [
        "class BankAccount:\n",
        "    def __init__(self, account_holder, initial_balance=0):\n",
        "        self.account_holder = account_holder\n",
        "        self.balance = initial_balance\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        if amount > 0:\n",
        "            self.balance += amount\n",
        "            print(f\"Deposited {amount}. New balance: {self.balance}\")\n",
        "        else:\n",
        "            print(\"Deposit amount must be positive.\")\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if amount > 0:\n",
        "            if self.balance >= amount:\n",
        "                self.balance -= amount\n",
        "                print(f\"Withdrew {amount}. New balance: {self.balance}\")\n",
        "            else:\n",
        "                print(\"Insufficient funds.\")\n",
        "        else:\n",
        "            print(\"Withdrawal amount must be positive.\")\n",
        "\n",
        "    def check_balance(self):\n",
        "        print(f\"Account balance for {self.account_holder}: {self.balance}\")\n",
        "\n",
        "# Get dynamic input for account creation\n",
        "try:\n",
        "    holder_name = input(\"Enter account holder name: \")\n",
        "    initial_bal = float(input(\"Enter initial balance: \"))\n",
        "    user_account = BankAccount(holder_name, initial_bal)\n",
        "\n",
        "    # Perform dynamic transactions\n",
        "    while True:\n",
        "        print(\"\\nChoose an action:\")\n",
        "        print(\"1. Deposit\")\n",
        "        print(\"2. Withdraw\")\n",
        "        print(\"3. Check Balance\")\n",
        "        print(\"4. Exit\")\n",
        "\n",
        "        choice = input(\"Enter your choice: \")\n",
        "\n",
        "        if choice == '1':\n",
        "            deposit_amount = float(input(\"Enter deposit amount: \"))\n",
        "            user_account.deposit(deposit_amount)\n",
        "        elif choice == '2':\n",
        "            withdraw_amount = float(input(\"Enter withdrawal amount: \"))\n",
        "            user_account.withdraw(withdraw_amount)\n",
        "        elif choice == '3':\n",
        "            user_account.check_balance()\n",
        "        elif choice == '4':\n",
        "            print(\"Exiting.\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Invalid choice. Please try again.\")\n",
        "\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter valid numbers for balance and amounts.\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter account holder name: power\n",
            "Enter initial balance: 9000000\n",
            "\n",
            "Choose an action:\n",
            "1. Deposit\n",
            "2. Withdraw\n",
            "3. Check Balance\n",
            "4. Exit\n",
            "Enter your choice: 2\n",
            "Enter withdrawal amount: 89999\n",
            "Withdrew 89999.0. New balance: 8910001.0\n",
            "\n",
            "Choose an action:\n",
            "1. Deposit\n",
            "2. Withdraw\n",
            "3. Check Balance\n",
            "4. Exit\n",
            "Enter your choice: 3\n",
            "Account balance for power: 8910001.0\n",
            "\n",
            "Choose an action:\n",
            "1. Deposit\n",
            "2. Withdraw\n",
            "3. Check Balance\n",
            "4. Exit\n",
            "Enter your choice: 4\n",
            "Exiting.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explaination:\n",
        "class BankAccount:: This line declares a new class named BankAccount.\n",
        "\n",
        "def __init__(self, account_holder, initial_balance=0):: This is the constructor. It's called when you create a new BankAccount object. It initializes the account_holder's name and the balance. The initial_balance is optional and defaults to 0.\n",
        "\n",
        "self.account_holder = account_holder: Stores the account holder's name.\n",
        "\n",
        "self.balance = initial_balance: Stores the current balance of the account.\n",
        "\n",
        "def deposit(self, amount):: This method handles deposits.\n",
        "\n",
        "if amount > 0:: Checks if the deposit amount is positive.\n",
        "\n",
        "self.balance += amount: Adds the deposit amount to the balance.\n",
        "\n",
        "print(f\"Deposited {amount}. New balance: {self.balance}\"): Prints a confirmation message with the new balance.\n",
        "\n",
        "else:: If the amount is not positive, it prints an error message.\n",
        "def withdraw(self, amount):: This method handles withdrawals.\n",
        "\n",
        "if amount > 0:: Checks if the withdrawal amount is positive.\n",
        "\n",
        "if self.balance >= amount:: Checks if there are sufficient funds for the withdrawal.\n",
        "\n",
        "self.balance -= amount: Subtracts the withdrawal amount from the balance.\n",
        "print(f\"Withdrew {amount}. New balance: {self.balance}\"): Prints a confirmation message with the new balance.\n",
        "\n",
        "else:: If there are insufficient funds, it prints an error message.\n",
        "\n",
        "else:: If the withdrawal amount is not positive, it prints an error message.\n",
        "\n",
        "def check_balance(self):: This method prints the current balance of the account.\n",
        "print(f\"Account balance for {self.account_holder}: {self.balance}\"): Prints the account holder's name and their current balance.\n",
        "\n",
        "try...except ValueError...except Exception as e:: This block handles potential errors during user input (like entering non-numeric values) or other unexpected errors.\n",
        "\n",
        "holder_name = input(\"Enter account holder name: \"): Prompts the user to enter the account holder's name.\n",
        "\n",
        "initial_bal = float(input(\"Enter initial balance: \")): Prompts the user for the initial balance and converts it to a floating-point number.\n",
        "\n",
        "user_account = BankAccount(holder_name, initial_bal): Creates a new BankAccount object with the user-provided details.\n",
        "\n",
        "while True:: This starts an infinite loop to allow the user to perform multiple transactions until they choose to exit.\n",
        "\n",
        "Inside the while loop:\n",
        "\n",
        "The code displays a menu of actions (Deposit, Withdraw, Check Balance, Exit).\n",
        "choice = input(\"Enter your choice: \"): Gets the user's choice.\n",
        "\n",
        "if choice == '1':: If the choice is '1', it prompts for the deposit amount and calls the deposit method.\n",
        "\n",
        "elif choice == '2':: If the choice is '2', it prompts for the withdrawal amount and calls the withdraw method.\n",
        "\n",
        "elif choice == '3':: If the choice is '3', it calls the check_balance method.\n",
        "\n",
        "elif choice == '4':: If the choice is '4', it prints an exiting message and breaks out of the loop.\n",
        "\n",
        "else:: If the choice is invalid, it prints an error message."
      ],
      "metadata": {
        "id": "O2R5s9DF4et9"
      }
    }
  ]
}